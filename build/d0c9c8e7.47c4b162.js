(window.webpackJsonp=window.webpackJsonp||[]).push([[1249],{1320:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return i})),r.d(n,"metadata",(function(){return l})),r.d(n,"toc",(function(){return m})),r.d(n,"default",(function(){return u}));var o=r(3),t=r(7),a=(r(0),r(1583)),i={id:"react-hook-forms",title:"React Hook Forms"},l={unversionedId:"react-hook-forms",id:"version-3.0.0-next.21/react-hook-forms",isDocsHomePage:!1,title:"React Hook Forms",description:"A Performant, flexible and extensible forms with easy-to-use validation. And below are some examples showing its integration with NativeBase.",source:"@site/versioned_docs/version-3.0.0-next.21/reactHooksForms.md",slug:"/react-hook-forms",permalink:"/3.0.0-next.21/react-hook-forms",editUrl:"https://github.com/nativebase/website/tree/main/versioned_docs/version-3.0.0-next.21/reactHooksForms.md",version:"3.0.0-next.21",sidebar:"version-3.0.0-next.21/componentsSidebar",previous:{title:"Todo-List",permalink:"/3.0.0-next.21/todo-example"},next:{title:"nativebase-formik-ui",permalink:"/3.0.0-next.21/nativebase-formik-ui"}},m=[{value:"Usage",id:"usage",children:[]},{value:"Radio and Checkbox",id:"radio-and-checkbox",children:[]},{value:"Select",id:"select",children:[]},{value:"Slider",id:"slider",children:[]},{value:"Textarea",id:"textarea",children:[]},{value:"Switch",id:"switch",children:[]},{value:"NumberInput",id:"numberinput",children:[]},{value:"PinInput",id:"pininput",children:[]}],s={toc:m};function u(e){var n=e.components,r=Object(t.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},s,r,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"A Performant, flexible and extensible forms with easy-to-use validation. And below are some examples showing its integration with NativeBase."),Object(a.b)("h2",{id:"usage"},"Usage"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import {\n  VStack,\n  Input,\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  NativeBaseProvider,\n} from 'native-base';\nimport React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\n\nfunction FormHookExample() {\n  const { control, handleSubmit, errors } = useForm();\n  const onSubmit = (data) => {\n    console.log('submiting with ', data);\n  };\n  return (\n    <VStack width='80%' space={4}>\n      <FormControl isRequired isInvalid={'firstName' in errors}>\n        <FormLabel>First Name</FormLabel>\n        <Controller\n          control={control}\n          render={({ onChange, onBlur, value }) => (\n            <Input\n              onBlur={onBlur}\n              placeholder='John'\n              onChangeText={(val) => onChange(val)}\n              value={value}\n            />\n          )}\n          name='firstName'\n          rules={{ required: 'Field is required', minLength: 3 }}\n          defaultValue=''\n        />\n        <FormErrorMessage>{errors.firstName?.message}</FormErrorMessage>\n      </FormControl>\n      <FormControl isInvalid={'lastName' in errors}>\n        <FormLabel>Last Name</FormLabel>\n        <Controller\n          control={control}\n          render={({ onChange, onBlur, value }) => (\n            <Input\n              onBlur={onBlur}\n              placeholder='Doe'\n              onChangeText={(val) => onChange(val)}\n              value={value}\n            />\n          )}\n          name='lastName'\n          defaultValue=''\n        />\n        <FormErrorMessage>{errors.lastName?.message}</FormErrorMessage>\n      </FormControl>\n      <FormControl isRequired isInvalid={'age' in errors}>\n        <FormLabel>Age</FormLabel>\n        <Controller\n          control={control}\n          render={({ onChange, onBlur, value }) => (\n            <Input\n              onBlur={onBlur}\n              placeholder='24'\n              onChangeText={(val) => onChange(val)}\n              value={value}\n            />\n          )}\n          name='age'\n          rules={{ min: 18, required: 'Age is required' }}\n          defaultValue=''\n        />\n        <FormErrorMessage>\n          {errors.age?.type === 'required'\n            ? errors.age?.message\n            : errors.age?.type === 'min' ?? 'Under age'}\n        </FormErrorMessage>\n      </FormControl>\n      <Button onPress={handleSubmit(onSubmit)} colorScheme='pink'>\n        Submit\n      </Button>\n    </VStack>\n  );\n}\nexport default function () {\n  return (\n    <NativeBaseProvider>\n      <FormHookExample />\n    </NativeBaseProvider>\n  );\n}\n")),Object(a.b)("h2",{id:"radio-and-checkbox"},"Radio and Checkbox"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import {\n  VStack,\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  RadioGroup,\n  Radio,\n  CheckboxGroup,\n  Checkbox,\n  Text,\n  Icon,\n  NativeBaseProvider,\n} from 'native-base';\nimport React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\n\nfunction FormHookCheckboxExample() {\n  const { control, handleSubmit, errors } = useForm();\n  const onSubmit = (data) => {\n    console.log('submiting with ', data);\n  };\n  return (\n    <VStack width='80%' space={4}>\n      <FormControl isRequired isInvalid={'hobbies' in errors}>\n        <FormLabel>Hobbies</FormLabel>\n        <Controller\n          control={control}\n          render={({ onChange }) => (\n            <CheckboxGroup\n              onChange={(values) => {\n                onChange(values);\n              }}\n              flexDirection='row'\n            >\n              <Checkbox\n                value='dart'\n                colorScheme='orange'\n                icon={<Icon name='bullseye' type='MaterialCommunityIcons' />}\n              >\n                <Text mx={2}>Darts</Text>\n              </Checkbox>\n              <Checkbox\n                value='movie'\n                colorScheme='dark'\n                icon={<Icon name='bat' type='MaterialCommunityIcons' />}\n              >\n                <Text mx={2}>Movie</Text>\n              </Checkbox>\n              <Checkbox\n                colorScheme='red'\n                value='camping'\n                icon={<Icon name='campfire' type='MaterialCommunityIcons' />}\n              >\n                <Text mx={2}>Camping</Text>\n              </Checkbox>\n              <Checkbox\n                value='chess'\n                colorScheme='blue'\n                icon={\n                  <Icon name='chess-knight' type='MaterialCommunityIcons' />\n                }\n              >\n                <Text mx={2}>Chess</Text>\n              </Checkbox>\n            </CheckboxGroup>\n          )}\n          rules={{ required: 'Atleast 1 hobbie needed' }}\n          name='hobbies'\n          defaultValue=''\n        />\n        <FormErrorMessage>{errors.hobbies?.message}</FormErrorMessage>\n      </FormControl>\n      <FormControl isRequired isInvalid={'gender' in errors}>\n        <FormLabel>Gender</FormLabel>\n        <Controller\n          control={control}\n          render={({ onChange }) => (\n            <RadioGroup\n              name='gender'\n              flexDirection='row'\n              onChange={(val) => onChange(val)}\n            >\n              <Radio value='male' colorScheme='blue'>\n                <Text mx={2}>Male</Text>\n              </Radio>\n              <Radio value='female' colorScheme='pink'>\n                <Text mx={2}>Female</Text>\n              </Radio>\n            </RadioGroup>\n          )}\n          name='gender'\n          rules={{ required: 'Gender is required' }}\n        />\n        <FormErrorMessage>{errors.gender?.message}</FormErrorMessage>\n      </FormControl>\n      <Button onPress={handleSubmit(onSubmit)} colorScheme='pink'>\n        Submit\n      </Button>\n    </VStack>\n  );\n}\nexport default function () {\n  return (\n    <NativeBaseProvider>\n      <FormHookCheckboxExample />\n    </NativeBaseProvider>\n  );\n}\n")),Object(a.b)("h2",{id:"select"},"Select"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import {\n  VStack,\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Select,\n  Icon,\n  NativeBaseProvider,\n} from 'native-base';\nimport React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\n\nfunction FormHookSelectExample() {\n  const { control, handleSubmit, errors } = useForm();\n  const onSubmit = (data) => {\n    console.log('submiting with ', data);\n  };\n  return (\n    <VStack width='80%' space={4}>\n      <FormControl isRequired isInvalid={'language' in errors}>\n        <FormLabel>Fav language:</FormLabel>\n        <Controller\n          control={control}\n          render={({ onChange, value }) => (\n            <Select\n              placeholder='Pick language'\n              selectedValue={value}\n              width={150}\n              onValueChange={(itemValue: string) => {\n                onChange(itemValue);\n              }}\n              selectedItemBg={'teal.400'}\n              dropdownOpenIcon={\n                <Icon name='arrow-drop-up' type='MaterialIcons' size={6} />\n              }\n              dropdownCloseIcon={\n                <Icon name='arrow-drop-down' type='MaterialIcons' size={6} />\n              }\n            >\n              <Select.Item label='JavaScript' value='js' />\n              <Select.Item label='TypeScript' value='ts' />\n              <Select.Item label='Java' value='java' />\n            </Select>\n          )}\n          name='language'\n          rules={{ required: 'Field is required' }}\n          defaultValue='js'\n        />\n        <FormErrorMessage>{errors.language?.message}</FormErrorMessage>\n      </FormControl>\n      <Button onPress={handleSubmit(onSubmit)} colorScheme='pink'>\n        Submit\n      </Button>\n    </VStack>\n  );\n}\nexport default function () {\n  return (\n    <NativeBaseProvider>\n      <FormHookSelectExample />\n    </NativeBaseProvider>\n  );\n}\n")),Object(a.b)("h2",{id:"slider"},"Slider"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import {\n  VStack,\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n  NativeBaseProvider,\n} from 'native-base';\nimport React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\n\nfunction FormHookSliderExample() {\n  const { control, handleSubmit, errors } = useForm();\n  const onSubmit = (data) => {\n    console.log('submiting with ', data);\n  };\n  return (\n    <VStack width='80%' space={4}>\n      <FormControl isRequired isInvalid={'like' in errors}>\n        <FormLabel>Amount you like NativeBase</FormLabel>\n        <Controller\n          control={control}\n          render={({ onChange, value }) => (\n            <Slider onChange={(val) => onChange(val)} defaultValue={value}>\n              <SliderTrack>\n                <SliderFilledTrack />\n              </SliderTrack>\n              <SliderThumb />\n            </Slider>\n          )}\n          name='like'\n          rules={{ required: 'Field is required', minLength: 3 }}\n          defaultValue={100}\n        />\n        <FormErrorMessage>{errors.like?.message}</FormErrorMessage>\n      </FormControl>\n      <Button onPress={handleSubmit(onSubmit)} colorScheme='pink'>\n        Submit\n      </Button>\n    </VStack>\n  );\n}\nexport default function () {\n  return (\n    <NativeBaseProvider>\n      <FormHookSliderExample />\n    </NativeBaseProvider>\n  );\n}\n")),Object(a.b)("h2",{id:"textarea"},"Textarea"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import {\n  VStack,\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  TextArea,\n  NativeBaseProvider,\n} from 'native-base';\nimport React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\n\nfunction FormHookTextareaExample() {\n  const { control, handleSubmit, errors } = useForm();\n  const onSubmit = (data) => {\n    console.log('submiting with ', data);\n  };\n  return (\n    <VStack width='80%' space={4}>\n      <FormControl isRequired isInvalid={'thought' in errors}>\n        <FormLabel>What do you think?</FormLabel>\n        <Controller\n          control={control}\n          render={({ onChange, value }) => (\n            <TextArea\n              placeholder='TextArea'\n              onChangeText={(val) => onChange(val)}\n              defaultValue={value}\n            />\n          )}\n          name='thought'\n          rules={{ required: 'Field is required', minLength: 3 }}\n          defaultValue='I love NativeBase.'\n        />\n        <FormErrorMessage>{errors.thought?.message}</FormErrorMessage>\n      </FormControl>\n      <Button onPress={handleSubmit(onSubmit)} colorScheme='pink'>\n        Submit\n      </Button>\n    </VStack>\n  );\n}\nexport default function () {\n  return (\n    <NativeBaseProvider>\n      <FormHookTextareaExample />\n    </NativeBaseProvider>\n  );\n}\n")),Object(a.b)("h2",{id:"switch"},"Switch"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import {\n  VStack,\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Switch,\n  NativeBaseProvider,\n} from 'native-base';\nimport React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\n\nfunction FormHookSwitchExample() {\n  const { control, handleSubmit, errors } = useForm();\n  const onSubmit = (data) => {\n    console.log('submiting with ', data);\n  };\n  return (\n    <VStack width='80%' space={4}>\n      <FormControl isInvalid={'rememberMe' in errors}>\n        <FormLabel>Remenber me:</FormLabel>\n        <Controller\n          control={control}\n          render={({ onChange, value }) => (\n            <Switch\n              onToggle={(val: boolean) => onChange(val)}\n              isChecked={value}\n            />\n          )}\n          name='rememberMe'\n          defaultValue={true}\n        />\n        <FormErrorMessage>{errors.rememberMe?.message}</FormErrorMessage>\n      </FormControl>\n      <Button onPress={handleSubmit(onSubmit)} colorScheme='pink'>\n        Submit\n      </Button>\n    </VStack>\n  );\n}\nexport default function () {\n  return (\n    <NativeBaseProvider>\n      <FormHookSwitchExample />\n    </NativeBaseProvider>\n  );\n}\n")),Object(a.b)("h2",{id:"numberinput"},"NumberInput"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import {\n  VStack,\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  NativeBaseProvider,\n} from 'native-base';\nimport React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\n\nfunction FormHookNumberInputExample() {\n  const { control, handleSubmit, errors } = useForm();\n  const onSubmit = (data) => {\n    console.log('submiting with ', data);\n  };\n  return (\n    <VStack width='80%' space={4}>\n      <FormControl isRequired isInvalid={'version' in errors}>\n        <FormLabel>Current Native Base Version:</FormLabel>\n        <Controller\n          control={control}\n          render={({ onChange, value }) => (\n            <NumberInput\n              onChange={(val: any) => onChange(val)}\n              defaultValue={value}\n            >\n              <NumberInputField />\n              <NumberInputStepper>\n                <NumberIncrementStepper />\n                <NumberDecrementStepper />\n              </NumberInputStepper>\n            </NumberInput>\n          )}\n          name='version'\n          rules={{ required: 'Field is required' }}\n          defaultValue={3}\n        />\n        <FormErrorMessage>{errors.version?.message}</FormErrorMessage>\n      </FormControl>\n      <Button onPress={handleSubmit(onSubmit)} colorScheme='pink'>\n        Submit\n      </Button>\n    </VStack>\n  );\n}\nexport default function () {\n  return (\n    <NativeBaseProvider>\n      <FormHookNumberInputExample />\n    </NativeBaseProvider>\n  );\n}\n")),Object(a.b)("h2",{id:"pininput"},"PinInput"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import {\n  VStack,\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  PinInput,\n  PinInputField,\n  NativeBaseProvider,\n} from 'native-base';\nimport React from 'react';\nimport { useForm, Controller } from 'react-hook-form';\n\nfunction FormHookPinInputExample() {\n  const { control, handleSubmit, errors } = useForm();\n  const onSubmit = (data) => {\n    console.log('submiting with ', data);\n  };\n  return (\n    <VStack width='80%' space={4}>\n      <FormControl isRequired isInvalid={'otp' in errors}>\n        <FormLabel>OTP:</FormLabel>\n        <Controller\n          control={control}\n          render={({ onChange, value }) => (\n            <PinInput onChange={(val: any) => onChange(val)} value={value}>\n              <PinInputField />\n              <PinInputField />\n              <PinInputField />\n              <PinInputField />\n            </PinInput>\n          )}\n          name='otp'\n          rules={{ required: 'Field is required', minLength: 4, maxLength: 4 }}\n        />\n        <FormErrorMessage>{errors.otp?.message}</FormErrorMessage>\n      </FormControl>\n      <Button onPress={handleSubmit(onSubmit)} colorScheme='pink'>\n        Submit\n      </Button>\n    </VStack>\n  );\n}\nexport default function () {\n  return (\n    <NativeBaseProvider>\n      <FormHookPinInputExample />\n    </NativeBaseProvider>\n  );\n}\n")))}u.isMDXComponent=!0},1583:function(e,n,r){"use strict";r.d(n,"a",(function(){return c})),r.d(n,"b",(function(){return p}));var o=r(0),t=r.n(o);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function m(e,n){if(null==e)return{};var r,o,t=function(e,n){if(null==e)return{};var r,o,t={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var s=t.a.createContext({}),u=function(e){var n=t.a.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},c=function(e){var n=u(e.components);return t.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.a.createElement(t.a.Fragment,{},n)}},b=t.a.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=m(e,["components","mdxType","originalType","parentName"]),c=u(r),b=o,p=c["".concat(i,".").concat(b)]||c[b]||d[b]||a;return r?t.a.createElement(p,l(l({ref:n},s),{},{components:r})):t.a.createElement(p,l({ref:n},s))}));function p(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=b;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return t.a.createElement.apply(null,i)}return t.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"}}]);