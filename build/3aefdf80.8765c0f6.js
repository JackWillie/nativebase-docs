(window.webpackJsonp=window.webpackJsonp||[]).push([[364],{1583:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},l=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),l=b(n),m=a,d=l["".concat(i,".").concat(m)]||l[m]||u[m]||o;return n?r.a.createElement(d,p(p({ref:t},s),{},{components:n})):r.a.createElement(d,p({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},435:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),o=(n(0),n(1583)),i={id:"installation",title:"Installation"},p={unversionedId:"installation",id:"version-3.0.0-next.21/installation",isDocsHomePage:!1,title:"Installation",description:"To have NativeBase components running onto your native apps, all you need to do is, create a fresh React Native project using whatever you want, expo is a really great starting point so we will start with that and install the NativeBase using npm or yarn and add all the peer dependencies.",source:"@site/versioned_docs/version-3.0.0-next.21/installation.md",slug:"/installation",permalink:"/docs/3.0.0-next.21/installation",editUrl:"https://github.com/nativebase/website/tree/main/versioned_docs/version-3.0.0-next.21/installation.md",version:"3.0.0-next.21",sidebar:"version-3.0.0-next.21/componentsSidebar",previous:{title:"NativeBase 3.0",permalink:"/docs/3.0.0-next.21/nativebase"},next:{title:"Setup NativeBase Provider",permalink:"/docs/3.0.0-next.21/setup-provider"}},c=[{value:"Setup with Expo",id:"setup-with-expo",children:[]},{value:"Setup with React Native",id:"setup-with-react-native",children:[]},{value:"Setup for Next.js with Expo for Web",id:"setup-for-nextjs-with-expo-for-web",children:[{value:"Important",id:"important",children:[]}]}],s={toc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"To have ",Object(o.b)("inlineCode",{parentName:"p"},"NativeBase")," components running onto your native apps, all you need to do is, create a fresh React Native project using whatever you want, ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.expo.io/get-started/installation/"}),"expo")," is a really great starting point so we will start with that and install the NativeBase using ",Object(o.b)("inlineCode",{parentName:"p"},"npm")," or ",Object(o.b)("inlineCode",{parentName:"p"},"yarn")," and add all the peer dependencies."),Object(o.b)("h2",{id:"setup-with-expo"},"Setup with Expo"),Object(o.b)("p",null,"Expo helps you make React Native apps with no build configuration. It works on macOS, Windows, and Linux. Refer this link for additional information on\xa0",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.expo.io/"}),"Expo")," and setting up an Expo starter app."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"For ",Object(o.b)("strong",{parentName:"em"},"Installing NativeBase")," just copy this and paste in your terminal and Voila! you are good to go to ",Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"/docs/setup-provider"}),"Setup NativeBaseProvider"))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"Using yarn"))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"yarn add native-base@next react-native-svg @expo/vector-icons styled-components styled-system\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"Using npm"))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm i native-base@next react-native-svg @expo/vector-icons styled-components styled-system\n")),Object(o.b)("h2",{id:"setup-with-react-native"},"Setup with React Native"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"react-native init AwesomeNativeBase\ncd AwesomeNativeBase\n")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Install ",Object(o.b)("strong",{parentName:"em"},"NativeBase"))),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Using ",Object(o.b)("strong",{parentName:"em"},"Yarn"))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"yarn add native-base@next\n")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Using ",Object(o.b)("strong",{parentName:"em"},"npm"))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm i native-base@next\n")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Install ",Object(o.b)("strong",{parentName:"em"},"Peer Dependencies"))),Object(o.b)("p",null,"The peer dependencies included from any npm packages does not automatically get installed. Your application will not depend on it explicitly."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactnative.dev/blog/2019/07/03/version-60"}),"react-native@0.60.0")," or above supports autolinking, so there is no need to run linking process. Read more about autolinking ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/react-native-community/cli/blob/master/docs/autolinking.md"}),"here"),".")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"react-native link\n")),Object(o.b)("p",null,"You've successfully setup\xa0",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://nativebase.io/"}),"NativeBase"),"\xa0with your\xa0",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactnative.dev/"}),"React Native"),"\xa0app. Your React Native app is ready to run on iOS and Android devices."),Object(o.b)("h2",{id:"setup-for-nextjs-with-expo-for-web"},"Setup for Next.js with Expo for Web"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npx create-react-native-app -t with-nextjs\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Switch to your project directory , that you created.")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"For ",Object(o.b)("strong",{parentName:"em"},"Installing NativeBase")," just copy this and paste in your terminal.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"Using yarn"))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"yarn add native-base@next react-native-svg @expo/vector-icons styled-components styled-system\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"Using npm"))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm i native-base@next react-native-svg @expo/vector-icons styled-components styled-system\n")),Object(o.b)("h3",{id:"important"},"Important"),Object(o.b)("p",null,"By default Next.js doesn't support static assets like an Expo project. Because this is the intended functionality of Next.js,\xa0",Object(o.b)("inlineCode",{parentName:"p"},"@expo/next-adapter"),"\xa0doesn't add font support by default. If you want to use libraries like\xa0",Object(o.b)("inlineCode",{parentName:"p"},"expo-font"),",\xa0",Object(o.b)("inlineCode",{parentName:"p"},"@expo/vector-icons"),",\xa0you'll need to change a few things."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Install the plugin -\xa0",Object(o.b)("inlineCode",{parentName:"p"},"yarn add next-fonts")),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/rohanray/next-fonts"}),Object(o.b)("inlineCode",{parentName:"a"},"next-fonts")),"\xa0injects a Webpack loader to handle fonts."))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Wrap the font method with the Expo method in your\xa0",Object(o.b)("inlineCode",{parentName:"p"},"next.config.js"),":"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"The order is important because Expo can mix in the location of vector icons to the existing font loader.")),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const { withExpo } = require('@expo/next-adapter');\nconst withFonts = require('next-fonts');\n\nmodule.exports = withExpo(\n  withFonts({\n    projectRoot: __dirname,\n  })\n);\n"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Now restart your project and you should be able to load fonts!"))))}b.isMDXComponent=!0}}]);