diff --git a/node_modules/@docusaurus/theme-classic/lib-next/theme/MDXComponents/index.js b/node_modules/@docusaurus/theme-classic/lib-next/theme/MDXComponents/index.js
index 46d4640..903fc81 100644
--- a/node_modules/@docusaurus/theme-classic/lib-next/theme/MDXComponents/index.js
+++ b/node_modules/@docusaurus/theme-classic/lib-next/theme/MDXComponents/index.js
@@ -10,28 +10,25 @@ import CodeBlock from '@theme/CodeBlock';
 import Heading from '@theme/Heading';
 import styles from './styles.module.css';
 const MDXComponents = {
-  code: props => {
-    const {
-      children
-    } = props;
+  code: (props) => {
+    const { children } = props;
 
     if (typeof children === 'string') {
       if (!children.includes('\n')) {
         return <code {...props} />;
       }
-
       return <CodeBlock {...props} />;
     }
 
     return children;
   },
-  a: props => <Link {...props} />,
-  pre: props => <div className={styles.mdxCodeBlock} {...props} />,
+  a: (props) => <Link {...props} />,
+  pre: (props) => <div className={styles.mdxCodeBlock} {...props} />,
   h1: Heading('h1'),
   h2: Heading('h2'),
   h3: Heading('h3'),
   h4: Heading('h4'),
   h5: Heading('h5'),
-  h6: Heading('h6')
+  h6: Heading('h6'),
 };
 export default MDXComponents;
diff --git a/node_modules/@docusaurus/theme-classic/lib-next/theme/ThemeProvider/index.js b/node_modules/@docusaurus/theme-classic/lib-next/theme/ThemeProvider/index.js
index 55e1316..70b2486 100644
--- a/node_modules/@docusaurus/theme-classic/lib-next/theme/ThemeProvider/index.js
+++ b/node_modules/@docusaurus/theme-classic/lib-next/theme/ThemeProvider/index.js
@@ -4,23 +4,43 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
-import React from 'react';
+import React, { useEffect } from 'react';
 import useTheme from '@theme/hooks/useTheme';
 import ThemeContext from '@theme/ThemeContext';
+import { NativeBaseProvider, useColorMode } from 'native-base';
+
+function TempComponent({ children, isDarkTheme }) {
+  const { colorMode, toggleColorMode } = useColorMode();
+
+  useEffect(() => {
+    if (isDarkTheme && colorMode !== 'dark') {
+      toggleColorMode();
+    } else if (!isDarkTheme && colorMode !== 'light') {
+      toggleColorMode();
+    }
+  }, [isDarkTheme, colorMode]);
+
+  return children;
+}
 
 function ThemeProvider(props) {
-  const {
-    isDarkTheme,
-    setLightTheme,
-    setDarkTheme
-  } = useTheme();
-  return <ThemeContext.Provider value={{
-    isDarkTheme,
-    setLightTheme,
-    setDarkTheme
-  }}>
-      {props.children}
-    </ThemeContext.Provider>;
+  const { isDarkTheme, setLightTheme, setDarkTheme } = useTheme();
+  useEffect(() => {});
+  return (
+    <ThemeContext.Provider
+      value={{
+        isDarkTheme,
+        setLightTheme,
+        setDarkTheme,
+      }}
+    >
+      <NativeBaseProvider>
+        <TempComponent isDarkTheme={isDarkTheme}>
+          {props.children}
+        </TempComponent>
+      </NativeBaseProvider>
+    </ThemeContext.Provider>
+  );
 }
 
 export default ThemeProvider;
diff --git a/node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js b/node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js
index 5376c9a..ce28cc1 100644
--- a/node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js
+++ b/node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js
@@ -1,31 +1,77 @@
-"use strict";
+'use strict';
 
-Object.defineProperty(exports, "__esModule", {
-  value: true
+Object.defineProperty(exports, '__esModule', {
+  value: true,
 });
 exports.default = void 0;
 
-var _react = _interopRequireWildcard(require("react"));
+var _react = _interopRequireWildcard(require('react'));
 
-var _clsx = _interopRequireDefault(require("clsx"));
+var _clsx = _interopRequireDefault(require('clsx'));
 
-var _prismReactRenderer = _interopRequireWildcard(require("prism-react-renderer"));
+var _prismReactRenderer = _interopRequireWildcard(
+  require('prism-react-renderer')
+);
 
-var _copyTextToClipboard = _interopRequireDefault(require("copy-text-to-clipboard"));
+var _copyTextToClipboard = _interopRequireDefault(
+  require('copy-text-to-clipboard')
+);
 
-var _parseNumericRange = _interopRequireDefault(require("parse-numeric-range"));
+var _parseNumericRange = _interopRequireDefault(require('parse-numeric-range'));
 
-var _usePrismTheme = _interopRequireDefault(require("@theme/hooks/usePrismTheme"));
+var _usePrismTheme = _interopRequireDefault(
+  require('@theme/hooks/usePrismTheme')
+);
 
-var _stylesModule = _interopRequireDefault(require("./styles.module.css"));
+var _stylesModule = _interopRequireDefault(require('./styles.module.css'));
 
-var _themeCommon = require("@docusaurus/theme-common");
+var _themeCommon = require('@docusaurus/theme-common');
 
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+function _interopRequireDefault(obj) {
+  return obj && obj.__esModule ? obj : { default: obj };
+}
 
-function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }
+function _getRequireWildcardCache() {
+  if (typeof WeakMap !== 'function') return null;
+  var cache = new WeakMap();
+  _getRequireWildcardCache = function () {
+    return cache;
+  };
+  return cache;
+}
 
-function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
+function _interopRequireWildcard(obj) {
+  if (obj && obj.__esModule) {
+    return obj;
+  }
+  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
+    return { default: obj };
+  }
+  var cache = _getRequireWildcardCache();
+  if (cache && cache.has(obj)) {
+    return cache.get(obj);
+  }
+  var newObj = {};
+  var hasPropertyDescriptor =
+    Object.defineProperty && Object.getOwnPropertyDescriptor;
+  for (var key in obj) {
+    if (Object.prototype.hasOwnProperty.call(obj, key)) {
+      var desc = hasPropertyDescriptor
+        ? Object.getOwnPropertyDescriptor(obj, key)
+        : null;
+      if (desc && (desc.get || desc.set)) {
+        Object.defineProperty(newObj, key, desc);
+      } else {
+        newObj[key] = obj[key];
+      }
+    }
+  }
+  newObj.default = obj;
+  if (cache) {
+    cache.set(obj, newObj);
+  }
+  return newObj;
+}
 
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
@@ -35,40 +81,51 @@ function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj;
  */
 const highlightLinesRangeRegex = /{([\d,-]+)}/;
 
-const getHighlightDirectiveRegex = (languages = ['js', 'jsBlock', 'jsx', 'python', 'html']) => {
+const getHighlightDirectiveRegex = (
+  languages = ['js', 'jsBlock', 'jsx', 'python', 'html']
+) => {
   // supported types of comments
   const comments = {
     js: {
       start: '\\/\\/',
-      end: ''
+      end: '',
     },
     jsBlock: {
       start: '\\/\\*',
-      end: '\\*\\/'
+      end: '\\*\\/',
     },
     jsx: {
       start: '\\{\\s*\\/\\*',
-      end: '\\*\\/\\s*\\}'
+      end: '\\*\\/\\s*\\}',
     },
     python: {
       start: '#',
-      end: ''
+      end: '',
     },
     html: {
       start: '<!--',
-      end: '-->'
-    }
+      end: '-->',
+    },
   }; // supported directives
 
-  const directives = ['highlight-next-line', 'highlight-start', 'highlight-end'].join('|'); // to be more reliable, the opening and closing comment must match
+  const directives = [
+    'highlight-next-line',
+    'highlight-start',
+    'highlight-end',
+  ].join('|'); // to be more reliable, the opening and closing comment must match
 
-  const commentPattern = languages.map(lang => `(?:${comments[lang].start}\\s*(${directives})\\s*${comments[lang].end})`).join('|'); // white space is allowed, but otherwise it should be on it's own line
+  const commentPattern = languages
+    .map(
+      (lang) =>
+        `(?:${comments[lang].start}\\s*(${directives})\\s*${comments[lang].end})`
+    )
+    .join('|'); // white space is allowed, but otherwise it should be on it's own line
 
   return new RegExp(`^\\s*(?:${commentPattern})\\s*$`);
 }; // select comment styles based on language
 
-
-const highlightDirectiveRegex = lang => {
+const highlightDirectiveRegex = (lang) => {

   switch (lang) {
     case 'js':
     case 'javascript':
@@ -95,14 +152,8 @@ const highlightDirectiveRegex = lang => {
 
 const codeBlockTitleRegex = /(?:title=")(.*)(?:")/;
 
-var _default = ({
-  children,
-  className: languageClassName,
-  metastring
-}) => {
-  const {
-    prism
-  } = (0, _themeCommon.useThemeConfig)();
+var _default = ({ children, className: languageClassName, metastring }) => {
+  const { prism } = (0, _themeCommon.useThemeConfig)();
   const [showCopied, setShowCopied] = (0, _react.useState)(false);
   const [mounted, setMounted] = (0, _react.useState)(false); // The Prism theme on SSR is always the default theme but the site theme
   // can be in a different mode. React hydration doesn't update DOM styles
@@ -126,7 +177,9 @@ var _default = ({
     // Tested above
     // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
     const highlightLinesRange = metastring.match(highlightLinesRangeRegex)[1];
-    highlightLines = (0, _parseNumericRange.default)(highlightLinesRange).filter(n => n > 0);
+    highlightLines = (0, _parseNumericRange.default)(
+      highlightLinesRange
+    ).filter((n) => n > 0);
   }
 
   if (metastring && codeBlockTitleRegex.test(metastring)) {
@@ -135,15 +188,15 @@ var _default = ({
     codeBlockTitle = metastring.match(codeBlockTitleRegex)[1];
   }
 
-  let language = languageClassName && // Force Prism's language union type to `any` because it does not contain all available languages
-  // eslint-disable-next-line @typescript-eslint/no-explicit-any
-  languageClassName.replace(/language-/, '');
+  let language =
+    languageClassName && // Force Prism's language union type to `any` because it does not contain all available languages
+    // eslint-disable-next-line @typescript-eslint/no-explicit-any
+    languageClassName.replace(/language-/, '');
 
   if (!language && prism.defaultLanguage) {
     language = prism.defaultLanguage;
   } // only declaration OR directive highlight can be used for a block
 
-
   let code = content.replace(/\n$/, '');
 
   if (highlightLines.length === 0 && language !== undefined) {
@@ -153,14 +206,16 @@ var _default = ({
     const lines = content.replace(/\n$/, '').split('\n');
     let blockStart; // loop through lines
 
-    for (let index = 0; index < lines.length;) {
+    for (let index = 0; index < lines.length; ) {
       const line = lines[index]; // adjust for 0-index
 
       const lineNumber = index + 1;
       const match = line.match(directiveRegex);
 
       if (match !== null) {
-        const directive = match.slice(1).reduce((final, item) => final || item, undefined);
+        const directive = match
+          .slice(1)
+          .reduce((final, item) => final || item, undefined);
 
         switch (directive) {
           case 'highlight-next-line':
@@ -196,54 +251,83 @@ var _default = ({
     setTimeout(() => setShowCopied(false), 2000);
   };
 
-  return <_prismReactRenderer.default {..._prismReactRenderer.defaultProps} key={String(mounted)} theme={prismTheme} code={code} language={language}>
-      {({
-      className,
-      style,
-      tokens,
-      getLineProps,
-      getTokenProps
-    }) => <>
-          {codeBlockTitle && <div style={style} className={_stylesModule.default.codeBlockTitle}>
+  return (
+    <_prismReactRenderer.default
+      {..._prismReactRenderer.defaultProps}
+      key={String(mounted)}
+      theme={prismTheme}
+      code={code}
+      language={language}
+    >
+      {({ className, style, tokens, getLineProps, getTokenProps }) => (
+        <>
+          {codeBlockTitle && (
+            <div style={style} className={_stylesModule.default.codeBlockTitle}>
               {codeBlockTitle}
-            </div>}
+            </div>
+          )}
           <div className={_stylesModule.default.codeBlockContent}>
             <div
-        /* eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex */
-        tabIndex={0} className={(0, _clsx.default)(className, _stylesModule.default.codeBlock, 'thin-scrollbar', {
-          [_stylesModule.default.codeBlockWithTitle]: codeBlockTitle
-        })}>
-              <div className={_stylesModule.default.codeBlockLines} style={style}>
+              /* eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex */
+              tabIndex={0}
+              className={(0, _clsx.default)(
+                className,
+                _stylesModule.default.codeBlock,
+                'thin-scrollbar',
+                {
+                  [_stylesModule.default.codeBlockWithTitle]: codeBlockTitle,
+                }
+              )}
+            >
+              <div
+                className={_stylesModule.default.codeBlockLines}
+                style={style}
+              >
                 {tokens.map((line, i) => {
-              if (line.length === 1 && line[0].content === '') {
-                line[0].content = '\n'; // eslint-disable-line no-param-reassign
-              }
-
-              const lineProps = getLineProps({
-                line,
-                key: i
-              });
-
-              if (highlightLines.includes(i + 1)) {
-                lineProps.className = `${lineProps.className} docusaurus-highlight-code-line`;
-              }
-
-              return <div key={i} {...lineProps}>
-                      {line.map((token, key) => <span key={key} {...getTokenProps({
-                  token,
-                  key
-                })} />)}
-                    </div>;
-            })}
+                  if (line.length === 1 && line[0].content === '') {
+                    line[0].content = '\n'; // eslint-disable-line no-param-reassign
+                  }
+
+                  const lineProps = getLineProps({
+                    line,
+                    key: i,
+                  });
+
+                  if (highlightLines.includes(i + 1)) {
+                    lineProps.className = `${lineProps.className} docusaurus-highlight-code-line`;
+                  }
+
+                  return (
+                    <div key={i} {...lineProps}>
+                      {line.map((token, key) => (
+                        <span
+                          key={key}
+                          {...getTokenProps({
+                            token,
+                            key,
+                          })}
+                        />
+                      ))}
+                    </div>
+                  );
+                })}
               </div>
             </div>
 
-            <button ref={button} type="button" aria-label="Copy code to clipboard" className={(0, _clsx.default)(_stylesModule.default.copyButton)} onClick={handleCopyCode}>
+            <button
+              ref={button}
+              type="button"
+              aria-label="Copy code to clipboard"
+              className={(0, _clsx.default)(_stylesModule.default.copyButton)}
+              onClick={handleCopyCode}
+            >
               {showCopied ? 'Copied' : 'Copy'}
             </button>
           </div>
-        </>}
-    </_prismReactRenderer.default>;
+        </>
+      )}
+    </_prismReactRenderer.default>
+  );
 };
 
 exports.default = _default;
diff --git a/node_modules/@docusaurus/theme-classic/lib/theme/ThemeProvider/index.js b/node_modules/@docusaurus/theme-classic/lib/theme/ThemeProvider/index.js
index 0e45567..668e6ff 100644
--- a/node_modules/@docusaurus/theme-classic/lib/theme/ThemeProvider/index.js
+++ b/node_modules/@docusaurus/theme-classic/lib/theme/ThemeProvider/index.js
@@ -1,17 +1,34 @@
-"use strict";
+'use strict';
 
-Object.defineProperty(exports, "__esModule", {
-  value: true
+Object.defineProperty(exports, '__esModule', {
+  value: true,
 });
 exports.default = void 0;
 
-var _react = _interopRequireDefault(require("react"));
+var _react = _interopRequireDefault(require('react'));
 
-var _useTheme = _interopRequireDefault(require("@theme/hooks/useTheme"));
+var _useTheme = _interopRequireDefault(require('@theme/hooks/useTheme'));
 
-var _ThemeContext = _interopRequireDefault(require("@theme/ThemeContext"));
+var _ThemeContext = _interopRequireDefault(require('@theme/ThemeContext'));
+var { NativeBaseProvider, useColorMode } = require('native-base');
 
-function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+function _interopRequireDefault(obj) {
+  return obj && obj.__esModule ? obj : { default: obj };
+}
+
+function TempComponent({ children, isDarkTheme }) {
+  const { colorMode, toggleColorMode } = useColorMode();
+
+  useEffect(() => {
+    if (isDarkTheme && colorMode !== 'dark') {
+      toggleColorMode();
+    } else if (!isDarkTheme && colorMode !== 'light') {
+      toggleColorMode();
+    }
+  }, [isDarkTheme, colorMode]);
+
+  return children;
+}
 
 /**
  * Copyright (c) Facebook, Inc. and its affiliates.
@@ -20,18 +37,22 @@ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { de
  * LICENSE file in the root directory of this source tree.
  */
 function ThemeProvider(props) {
-  const {
-    isDarkTheme,
-    setLightTheme,
-    setDarkTheme
-  } = (0, _useTheme.default)();
-  return <_ThemeContext.default.Provider value={{
-    isDarkTheme,
-    setLightTheme,
-    setDarkTheme
-  }}>
-      {props.children}
-    </_ThemeContext.default.Provider>;
+  const { isDarkTheme, setLightTheme, setDarkTheme } = (0, _useTheme.default)();
+  return (
+    <_ThemeContext.default.Provider
+      value={{
+        isDarkTheme,
+        setLightTheme,
+        setDarkTheme,
+      }}
+    >
+      <NativeBaseProvider>
+        <TempComponent isDarkTheme={isDarkTheme}>
+          {props.children}
+        </TempComponent>
+      </NativeBaseProvider>
+    </_ThemeContext.default.Provider>
+  );
 }
 
 var _default = ThemeProvider;
